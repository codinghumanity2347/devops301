node {
// Get Artifactory server instance, defined in the Artifactory Plugin administration page.
	notify('Started')
	try{
    def server = Artifactory.server "01"
    def buildInfo = Artifactory.newBuildInfo() 

// Project Dir
    def project_path = "petclinic-code"


stage('GitCheckOut') {
git branch: 'pre-prod',  url: 'https://github.com/shreya246/devops301.git'
}



dir(project_path){

stage('Maven Clean') {
sh 'mvn clean'
}

stage('Maven Compile') {
sh 'mvn compile'
}

stage('Maven test') {
sh 'mvn test'
}

stage('Maven pkg') {
sh 'mvn package'
}

stage('Build Managment') {
      def uploadSpec = """{
	 "files": [
	{
	"pattern": "**/*.war",
	"target": "petclinic-war"
        }
	]
	}"""
	server.upload spec: uploadSpec
 }


stage('Publish build info') {
  server.publishBuildInfo buildInfo
}
stage("build & SonarQube analysis") {
          
              withSonarQubeEnv('sonar-01') {
                 sh 'mvn  sonar:sonar'
              }
          
      }

stage('Deployment - PreProd') {
sh 'docker-compose up -d --build'
}
	
	
}
notify('Completed the pre-production with docker')
	}
	catch(err){
		notify("Error ${err}")
		currentBuild.result='Failure'
		
	}
}
def notify(status){
	emailtext(
		to: 'shreya.panseja2@mindtree.com'
		subject: "${status} :JOB '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
		 body:"""<p>${status}: :JOB '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
            <p>Check Console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>""",
	)

}

